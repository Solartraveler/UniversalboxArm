##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.11.2] date: [Mon Dec 20 20:08:41 CET 2021]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################

#Name of this application
NAME     = Blinky
#Version of this application, to be used in the metadata
VERSION  = 1.0.0
#Author of this application, to be used in the metadata
AUTHOR   = Malte Marwedel
#Use the spdx notation here, to be used in the metadata
LICENSE  = BSD-3-Clause
#The MCU, this binary is compiled for, to be used in the metadata
CHIP     = stm32l452
#Watchdog in [ms]. 0 disables, maximum is 65535
WATCHDOG = 10000

#If the name is not readme.md, --transform needs to be used to adjust the name
TARREADME = readme.md
#Add a bitmap image to the tar file. Can be left empty.
TARIMAGE = image128x128.ppm

TARGET = $(NAME)-$(CHIP)
TARGETRAM = $(TARGET)-ram
TARGETFLASH = $(TARGET)-flash

#The final name needs to be application.bin
TARBINARY = --transform='flags=r;s|$(TARGETRAM)|application|' --directory=$(BUILD_DIR) $(TARGETRAM).bin
#The name should not be changed
TARMETA = metadata.json

#Date to be used in the metadata
DATE=`date +'%F'`
#Md5sum of the application
MD5SUM=`md5sum $(BUILD_DIR)/$(TARGETRAM).bin | cut -d ' ' -f 1`
#Start address where the program should be loaded to. Needs to be compatible with the used linking addresses.
STARTADDR=`grep "_Code_Start.=" $(LDSCRIPTRAM) | cut -d " " -f3 | sed 's/[;\r]//g'`

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

COMMON=../common
UTILITIES=../../utilities

STM_HAL=$(COMMON)/STM32L4xx_HAL_Driver
CMSIS=$(COMMON)/CMSIS

######################################
# source
######################################
# C sources
C_SOURCES =  \
Core/Src/main.c \
Core/Src/stm32l4xx_it.c \
Core/Src/stm32l4xx_hal_msp.c \
$(STM_HAL)/Src/stm32l4xx_hal.c \
$(STM_HAL)/Src/stm32l4xx_hal_rcc.c \
$(STM_HAL)/Src/stm32l4xx_hal_gpio.c \
$(STM_HAL)/Src/stm32l4xx_hal_pwr.c \
$(STM_HAL)/stm32l4xx_hal_pwr_ex.c \
$(STM_HAL)/stm32l4xx_hal_cortex.c \
Core/Src/system_stm32l4xx.c

# ASM sources
ASM_SOURCES =  \
startup_stm32l452xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

PPM2BIN = $(UTILITIES)/ppm2menuimage/build/ppm2menuimage

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32L452xx


# AS includes
AS_INCLUDES =

# C includes
C_INCLUDES =  \
-ICore/Inc \
-I$(STM_HAL)/Inc \
-I$(STM_HAL)/Inc/Legacy \
-I$(CMSIS)/Device/ST/STM32L4xx/Include \
-I$(CMSIS)/Include \
-I$(CMSIS)/Include


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPTFLASH = STM32L452RETx_FLASH.ld
LDSCRIPTRAM = STM32L452RETx_RAM.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

LDFLAGSRAM =   $(LDFLAGS) -T$(LDSCRIPTRAM)
LDFLAGSFLASH = $(LDFLAGS) -T$(LDSCRIPTFLASH)
# default action: build all
all: $(BUILD_DIR)/$(TARGETFLASH).elf $(BUILD_DIR)/$(TARGETFLASH).hex $(BUILD_DIR)/$(TARGETFLASH).bin $(BUILD_DIR)/$(TARGETRAM).tar


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

IMAGES = $(notdir $(TARIMAGE:.ppm=.bin))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGETFLASH).elf: $(OBJECTS) Makefile | $(BUILD_DIR)
	$(CC) $(OBJECTS) $(LDFLAGSFLASH) -o $@
	$(SZ) $@

$(BUILD_DIR)/$(TARGETRAM).elf: $(OBJECTS) Makefile | $(BUILD_DIR)
	$(CC) $(OBJECTS) $(LDFLAGSRAM) -o $@

$(BUILD_DIR)/metadata.json: $(BUILD_DIR)/$(TARGETRAM).bin Makefile
	jq -n --arg date $(DATE) --arg checksum $(MD5SUM) --arg startaddr $(STARTADDR) '{"name":"$(NAME)", "compiled":$$date, "version": "$(VERSION)", "author": "$(AUTHOR)", "license": "$(LICENSE)", "mcu":"$(CHIP)", "md5sum":$$checksum, "watchdog":"$(WATCHDOG)", "appaddr":$$startaddr}' > $@

$(BUILD_DIR)/$(IMAGES): $(TARIMAGE) | $(BUILD_DIR)
	$(PPM2BIN) --compress --input $< --output $@

$(BUILD_DIR)/$(TARGETRAM).tar: $(BUILD_DIR)/$(TARGETRAM).bin $(BUILD_DIR)/$(TARMETA) Makefile $(BUILD_DIR)/$(IMAGES) | $(BUILD_DIR)
	tar --create -f $@ --blocking-factor=1 --owner=0 --group=0 $(TARREADME) $(TARBINARY) $(TARMETA) $(IMAGES)

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@

$(BUILD_DIR):
	mkdir $@

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***