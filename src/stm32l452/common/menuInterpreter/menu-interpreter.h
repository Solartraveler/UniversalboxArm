/* MenuInterpreter
   Version 2.0
   (c) 2009-2010, 2012, 2019, 2020 by Malte Marwedel
   m DOT talk AT marwedels DOT de
   www.marwedels.de/malte
   menudesigner.sourceforge.net

   This Source Code Form is subject to the terms of the
   Mozilla Public License, v. 2.0.
   If a copy of the MPL was not distributed with this file,
   You can obtain one at https://mozilla.org/MPL/2.0/.
*/
//SPDX-License-Identifier: MPL-2.0

#ifndef MENU_INTERPRETER_H
#define MENU_INTERPRETER_H

#include <stdint.h>

#include "menu-interpreter-config.h"

//generate many printf messages:
//#define DEBUG

/* If you want to use a touch screen or mice, you may want to enable this in
order to have a function, which accepts Screen positions, searches a proper object
on this location and runs the action.
NOTE: The list element is only partially supported by now.
As of version 2.0: Just enable mouse support in menuedit and the proper define
will be set in menu-interpreter-config.h
#define MENU_MOUSE_SUPPORT
*/


#ifdef USE16BITADDR
/*special window switch code for subwindow return
Even if this is a allowed address, a new window would never
start at the last Byte of the bytecode, so no collision is
possible.
*/
#define MENU_SUBWINDOW_RET 0xFFFF
#define MENU_ACTION_BYTES 1
#define MENU_ADDR_BYTES 2
typedef uint16_t MENUADDR;
typedef uint8_t MENUACTION;

#else

#define MENU_SUBWINDOW_RET 0xFFFFFF
#define MENU_ACTION_BYTES 2
#define MENU_ADDR_BYTES 3
typedef uint32_t MENUADDR;
typedef uint16_t MENUACTION;

#endif


#ifdef LARGESCREEN
#define MENU_POSITION_BYTES 3
typedef uint16_t SCREENPOS;

#else
#define MENU_POSITION_BYTES 2
typedef uint8_t SCREENPOS;

#endif


//custom1
#define MENU_COLOR_CUSTOM1_RED_LSB_POS (MENU_COLOR_CUSTOM1_GREEN_BITS + MENU_COLOR_CUSTOM1_BLUE_BITS)
#define MENU_COLOR_CUSTOM1_RED_MSB_POS (MENU_COLOR_CUSTOM1_RED_BITS + MENU_COLOR_CUSTOM1_RED_LSB_POS -1)
#define MENU_COLOR_CUSTOM1_RED_MASK (((1<<MENU_COLOR_CUSTOM1_RED_BITS) -1) << (MENU_COLOR_CUSTOM1_GREEN_BITS + MENU_COLOR_CUSTOM1_BLUE_BITS))
#define MENU_COLOR_CUSTOM1_GREEN_LSB_POS (MENU_COLOR_CUSTOM1_BLUE_BITS)
#define MENU_COLOR_CUSTOM1_GREEN_MSB_POS (MENU_COLOR_CUSTOM1_GREEN_BITS + MENU_COLOR_CUSTOM1_GREEN_LSB_POS -1)
#define MENU_COLOR_CUSTOM1_GREEN_MASK  (((1<<MENU_COLOR_CUSTOM1_GREEN_BITS) -1) << (MENU_COLOR_CUSTOM1_BLUE_BITS))
#define MENU_COLOR_CUSTOM1_BLUE_LSB_POS (0)
#define MENU_COLOR_CUSTOM1_BLUE_MSB_POS (MENU_COLOR_CUSTOM1_BLUE_BITS -1)
#define MENU_COLOR_CUSTOM1_BLUE_MASK ((1<<MENU_COLOR_CUSTOM1_BLUE_BITS) -1)

//custom2
#define MENU_COLOR_CUSTOM2_RED_LSB_POS (MENU_COLOR_CUSTOM2_GREEN_BITS + MENU_COLOR_CUSTOM2_BLUE_BITS)
#define MENU_COLOR_CUSTOM2_RED_MSB_POS (MENU_COLOR_CUSTOM2_RED_BITS + MENU_COLOR_CUSTOM2_GREEN_BITS + MENU_COLOR_CUSTOM2_BLUE_BITS -1)
#define MENU_COLOR_CUSTOM2_RED_MASK (((1<<MENU_COLOR_CUSTOM2_RED_BITS) -1) << (MENU_COLOR_CUSTOM2_GREEN_BITS + MENU_COLOR_CUSTOM2_BLUE_BITS))
#define MENU_COLOR_CUSTOM2_GREEN_LSB_POS (MENU_COLOR_CUSTOM2_BLUE_BITS)
#define MENU_COLOR_CUSTOM2_GREEN_MSB_POS (MENU_COLOR_CUSTOM2_GREEN_BITS + MENU_COLOR_CUSTOM2_BLUE_BITS -1)
#define MENU_COLOR_CUSTOM2_GREEN_MASK  (((1<<MENU_COLOR_CUSTOM2_GREEN_BITS) -1) << (MENU_COLOR_CUSTOM2_BLUE_BITS))
#define MENU_COLOR_CUSTOM2_BLUE_LSB_POS (0)
#define MENU_COLOR_CUSTOM2_BLUE_MSB_POS (MENU_COLOR_CUSTOM2_BLUE_BITS -1)
#define MENU_COLOR_CUSTOM2_BLUE_MASK ((1<<MENU_COLOR_CUSTOM2_BLUE_BITS) -1)

//custom3
#define MENU_COLOR_CUSTOM3_RED_LSB_POS (MENU_COLOR_CUSTOM3_GREEN_BITS + MENU_COLOR_CUSTOM3_BLUE_BITS)
#define MENU_COLOR_CUSTOM3_RED_MSB_POS (MENU_COLOR_CUSTOM3_RED_BITS + MENU_COLOR_CUSTOM3_GREEN_BITS + MENU_COLOR_CUSTOM3_BLUE_BITS -1)
#define MENU_COLOR_CUSTOM3_RED_MASK (((1<<MENU_COLOR_CUSTOM3_RED_BITS) -1) << (MENU_COLOR_CUSTOM3_GREEN_BITS + MENU_COLOR_CUSTOM3_BLUE_BITS))
#define MENU_COLOR_CUSTOM3_GREEN_LSB_POS (MENU_COLOR_CUSTOM3_BLUE_BITS)
#define MENU_COLOR_CUSTOM3_GREEN_MSB_POS (MENU_COLOR_CUSTOM3_GREEN_BITS + MENU_COLOR_CUSTOM3_BLUE_BITS -1)
#define MENU_COLOR_CUSTOM3_GREEN_MASK  (((1<<MENU_COLOR_CUSTOM3_GREEN_BITS) -1) << (MENU_COLOR_CUSTOM3_BLUE_BITS))
#define MENU_COLOR_CUSTOM3_BLUE_LSB_POS (0)
#define MENU_COLOR_CUSTOM3_BLUE_MSB_POS (MENU_COLOR_CUSTOM3_BLUE_BITS -1)
#define MENU_COLOR_CUSTOM3_BLUE_MASK ((1<<MENU_COLOR_CUSTOM3_BLUE_BITS) -1)

//greyscale
#define MENU_COLOR_4B_RED_MSB_POS 3
#define MENU_COLOR_4B_RED_MASK 0x0F
#define MENU_COLOR_4B_GREEN_MSB_POS 3
#define MENU_COLOR_4B_GREEN_MASK 0x0F
#define MENU_COLOR_4B_BLUE_MSB_POS 3
#define MENU_COLOR_4B_BLUE_MASK 0x0F

//monochrome
#define MENU_COLOR_1B_RED_MSB_POS 0
#define MENU_COLOR_1B_RED_MASK 0x01
#define MENU_COLOR_1B_GREEN_MSB_POS 0
#define MENU_COLOR_1B_GREEN_MASK 0x01
#define MENU_COLOR_1B_BLUE_MSB_POS 0
#define MENU_COLOR_1B_BLUE_MASK 0x01


#if defined(MENU_SCREEN_COLORCUSTOM1)
#define MENU_COLOR_OUT_RED_BITS      MENU_COLOR_CUSTOM1_RED_BITS
#define MENU_COLOR_OUT_RED_LSB_POS   MENU_COLOR_CUSTOM1_RED_LSB_POS
#define MENU_COLOR_OUT_RED_MSB_POS   MENU_COLOR_CUSTOM1_RED_MSB_POS
#define MENU_COLOR_OUT_RED_MASK      MENU_COLOR_CUSTOM1_RED_MASK
#define MENU_COLOR_OUT_GREEN_BITS    MENU_COLOR_CUSTOM1_GREEN_BITS
#define MENU_COLOR_OUT_GREEN_LSB_POS MENU_COLOR_CUSTOM1_GREEN_LSB_POS
#define MENU_COLOR_OUT_GREEN_MSB_POS MENU_COLOR_CUSTOM1_GREEN_MSB_POS
#define MENU_COLOR_OUT_GREEN_MASK    MENU_COLOR_CUSTOM1_GREEN_MASK
#define MENU_COLOR_OUT_BLUE_BITS     MENU_COLOR_CUSTOM1_BLUE_BITS
#define MENU_COLOR_OUT_BLUE_LSB_POS  MENU_COLOR_CUSTOM1_BLUE_LSB_POS
#define MENU_COLOR_OUT_BLUE_MSB_POS  MENU_COLOR_CUSTOM1_BLUE_MSB_POS
#define MENU_COLOR_OUT_BLUE_MASK     MENU_COLOR_CUSTOM1_BLUE_MASK

#elif defined(MENU_SCREEN_COLORCUSTOM2)
#define MENU_COLOR_OUT_RED_BITS      MENU_COLOR_CUSTOM2_RED_BITS
#define MENU_COLOR_OUT_RED_LSB_POS   MENU_COLOR_CUSTOM2_RED_LSB_POS
#define MENU_COLOR_OUT_RED_MSB_POS   MENU_COLOR_CUSTOM2_RED_MSB_POS
#define MENU_COLOR_OUT_RED_MASK      MENU_COLOR_CUSTOM2_RED_MASK
#define MENU_COLOR_OUT_GREEN_BITS    MENU_COLOR_CUSTOM2_GREEN_BITS
#define MENU_COLOR_OUT_GREEN_LSB_POS MENU_COLOR_CUSTOM2_GREEN_LSB_POS
#define MENU_COLOR_OUT_GREEN_MSB_POS MENU_COLOR_CUSTOM2_GREEN_MSB_POS
#define MENU_COLOR_OUT_GREEN_MASK    MENU_COLOR_CUSTOM2_GREEN_MASK
#define MENU_COLOR_OUT_BLUE_BITS     MENU_COLOR_CUSTOM2_BLUE_BITS
#define MENU_COLOR_OUT_BLUE_LSB_POS  MENU_COLOR_CUSTOM2_BLUE_LSB_POS
#define MENU_COLOR_OUT_BLUE_MSB_POS  MENU_COLOR_CUSTOM2_BLUE_MSB_POS
#define MENU_COLOR_OUT_BLUE_MASK     MENU_COLOR_CUSTOM2_BLUE_MASK

#elif defined(MENU_SCREEN_COLORCUSTOM3)
#define MENU_COLOR_OUT_RED_BITS      MENU_COLOR_CUSTOM3_RED_BITS
#define MENU_COLOR_OUT_RED_LSB_POS   MENU_COLOR_CUSTOM3_RED_LSB_POS
#define MENU_COLOR_OUT_RED_MSB_POS   MENU_COLOR_CUSTOM3_RED_MSB_POS
#define MENU_COLOR_OUT_RED_MASK      MENU_COLOR_CUSTOM3_RED_MASK
#define MENU_COLOR_OUT_GREEN_BITS    MENU_COLOR_CUSTOM3_GREEN_BITS
#define MENU_COLOR_OUT_GREEN_LSB_POS MENU_COLOR_CUSTOM3_GREEN_LSB_POS
#define MENU_COLOR_OUT_GREEN_MSB_POS MENU_COLOR_CUSTOM3_GREEN_MSB_POS
#define MENU_COLOR_OUT_GREEN_MASK    MENU_COLOR_CUSTOM3_GREEN_MASK
#define MENU_COLOR_OUT_BLUE_BITS     MENU_COLOR_CUSTOM3_BLUE_BITS
#define MENU_COLOR_OUT_BLUE_LSB_POS  MENU_COLOR_CUSTOM3_BLUE_LSB_POS
#define MENU_COLOR_OUT_BLUE_MSB_POS  MENU_COLOR_CUSTOM3_BLUE_MSB_POS
#define MENU_COLOR_OUT_BLUE_MASK     MENU_COLOR_CUSTOM3_BLUE_MASK


#elif defined(MENU_SCREEN_GREYSCALE4BIT)
#define MENU_COLOR_OUT_RED_MSB_POS   MENU_COLOR_4B_RED_MSB_POS
#define MENU_COLOR_OUT_RED_MASK      MENU_COLOR_4B_RED_MASK
#define MENU_COLOR_OUT_GREEN_MSB_POS MENU_COLOR_4B_GREEN_MSB_POS
#define MENU_COLOR_OUT_GREEN_MASK    MENU_COLOR_4B_GREEN_MASK
#define MENU_COLOR_OUT_BLUE_MSB_POS  MENU_COLOR_4B_BLUE_MSB_POS
#define MENU_COLOR_OUT_BLUE_MASK     MENU_COLOR_4B_BLUE_MASK

#else
//monochrome or 7segment or HD44780
#define MENU_COLOR_OUT_RED_MSB_POS   MENU_COLOR_1B_RED_MSB_POS
#define MENU_COLOR_OUT_RED_MASK      MENU_COLOR_1B_RED_MASK
#define MENU_COLOR_OUT_GREEN_MSB_POS MENU_COLOR_1B_GREEN_MSB_POS
#define MENU_COLOR_OUT_GREEN_MASK    MENU_COLOR_1B_GREEN_MASK
#define MENU_COLOR_OUT_BLUE_MSB_POS  MENU_COLOR_1B_BLUE_MSB_POS
#define MENU_COLOR_OUT_BLUE_MASK     MENU_COLOR_1B_BLUE_MASK

#endif

#define MENU_COLOR_MAX (MENU_COLOR_OUT_RED_MASK | MENU_COLOR_OUT_GREEN_MASK | MENU_COLOR_OUT_BLUE_MASK)

#if (MENU_COLOR_OUT_RED_MSB_POS > 15)
typedef uint32_t SCREENCOLOR;
#elif (MENU_COLOR_OUT_RED_MSB_POS > 7)
typedef uint16_t SCREENCOLOR;
#else
typedef uint8_t SCREENCOLOR;
#endif

#if (MENU_COLOR_CUSTOM1_RED_MSB_POS > 15)
typedef uint32_t COLORCUSTOM1;
#define MENU_GFX_CUSTOM1_BYTES 3

#elif (MENU_COLOR_CUSTOM1_RED_MSB_POS > 7)
typedef uint16_t COLORCUSTOM1;
#define MENU_GFX_CUSTOM1_BYTES 2

#else
typedef uint8_t COLORCUSTOM1;
#define MENU_GFX_CUSTOM1_BYTES 1

#endif
#define MENU_GFX_CUSTOM1_COMPRESSION_BITS (8 - ((MENU_COLOR_CUSTOM1_RED_MSB_POS + 1) % 8))


#if (MENU_COLOR_CUSTOM2_RED_MSB_POS > 15)
typedef uint32_t COLORCUSTOM2;
#define MENU_GFX_CUSTOM2_BYTES 3

#elif (MENU_COLOR_CUSTOM2_RED_MSB_POS > 7)
typedef uint16_t COLORCUSTOM2;
#define MENU_GFX_CUSTOM2_BYTES 2

#else
typedef uint8_t COLORCUSTOM2;
#define MENU_GFX_CUSTOM2_BYTES 1

#endif
#define MENU_GFX_CUSTOM2_COMPRESSION_BITS (8 - ((MENU_COLOR_CUSTOM2_RED_MSB_POS + 1) % 8))

#if (MENU_COLOR_CUSTOM3_RED_MSB_POS > 15)
typedef uint32_t COLORCUSTOM3;
#define MENU_GFX_CUSTOM3_BYTES 3

#elif (MENU_COLOR_CUSTOM3_RED_MSB_POS > 7)
typedef uint16_t COLORCUSTOM3;
#define MENU_GFX_CUSTOM3_BYTES 2

#else
typedef uint8_t COLORCUSTOM3;
#define MENU_GFX_CUSTOM3_BYTES 1

#endif
#define MENU_GFX_CUSTOM3_COMPRESSION_BITS (8 - ((MENU_COLOR_CUSTOM3_RED_MSB_POS + 1) % 8))


/* Some screens take up 700000 ticks for drawing, if this is too much for a
multi threaded program, define MENU_SCHEDULE with your thread switch function and
this will result in a thread switch after drawing of every object.
Make sure, no menu_ functions are entered multiple times, as their behaviour
may be undefined in this case.

example for Nut/OS:
#include <sys/thread.h>
#define MENU_SCHEDULE NutThreadYield();

 */

#ifndef MENU_SCHEDULE
#define MENU_SCHEDULE
#endif


//Implement the five functions by your own:
extern uint8_t menu_byte_get(MENUADDR addr);
extern void menu_screen_set(SCREENPOS x, SCREENPOS y, SCREENCOLOR color);
extern void menu_screen_flush(void);
extern void menu_screen_clear(void);
extern uint8_t menu_action(MENUACTION action);

//arrys for dynamic data
extern char * menu_strings[];
extern uint8_t menu_checkboxstate[];
extern uint8_t menu_radiobuttonstate[];
extern uint16_t menu_listindexstate[];
extern uint8_t * menu_gfxdata[];

#ifdef MENU_USE_MULTIGFX
extern uint16_t menu_gfxindexstate[];
#endif

//header identify bytes
#define MENU_INVALID 0
#define MENU_BOX 1
#define MENU_LABEL 2
#define MENU_BUTTON 3
#define MENU_GFX 4
#define MENU_LIST 5
#define MENU_CHECKBOX 6
#define MENU_RADIOBUTTON 7
#define MENU_SUBWINDOW 8
#define MENU_WINDOW 9
#define MENU_SHORTCUT 10

//options bit definitions
#define MENU_OPTIONS_FOCUSABLE 0
#define MENU_OPTIONS_RECTANGLE 1
#define MENU_OPTIONS_COMPRESSED 2
#define MENU_OPTIONS_STORAGE 3
//shared with multi language
#define MENU_OPTIONS_MULTIGFX 4
//bits 5...8
#define MENU_OPTIONS_IMAGEFORMAT 5
//bit 5, never used togehter with imageformat
#define MENU_OPTIONS_TRANSPARENCY 5


#define MENU_OPTION_BYTES 1

#define MENU_FONT_BYTES 1

#define MENU_BOX_COLOR_BYTES 1

#define MENU_FONT_BYTES 1

#define MENU_LIST_INDEX_BYTES 1

#define MENU_KEY_BYTES 1

#define MENU_CHECKBOX_INDEX_BYTES 1

#define MENU_RADIOBUTTON_INDEX_BYTES 1

/*Some magic constans needed to find the right place of the information
*/

//offset for all focusable objects where action and windows are starting
#define MENU_ACTION_OFF (1 + MENU_POSITION_BYTES * 2 + MENU_OPTION_BYTES)

//offset containing position and x size and +1 (lower byte of x size)
#define MENU_LISTPOS_OFF (1 + MENU_POSITION_BYTES + 1)

//offset to the index of the checkbox and radio button
#define MENU_CKRAD_OFF (MENU_ACTION_OFF + MENU_ACTION_BYTES + 2 * MENU_ADDR_BYTES + MENU_FONT_BYTES)

//offset for all options (2x screen XY cords)
#define MENU_CORDSKIP (MENU_POSITION_BYTES * 2)


//number of data bytes for each object (excluding header identify byte)
#define MENU_INVALID_DATA 0

#define MENU_BOX_DATA (MENU_POSITION_BYTES * 2 + MENU_OPTION_BYTES + MENU_ACTION_BYTES + MENU_ADDR_BYTES + MENU_BOX_COLOR_BYTES)

#define MENU_LABEL_DATA (MENU_POSITION_BYTES + MENU_OPTION_BYTES + MENU_ADDR_BYTES + MENU_FONT_BYTES)

#define MENU_BUTTON_DATA (MENU_POSITION_BYTES * 2 + MENU_OPTION_BYTES + MENU_ACTION_BYTES + MENU_ADDR_BYTES * 2 + MENU_FONT_BYTES)

#define MENU_GFX_DATA (MENU_POSITION_BYTES * 2 + MENU_OPTION_BYTES + MENU_ACTION_BYTES + MENU_ADDR_BYTES * 2)

#define MENU_LIST_DATA (MENU_POSITION_BYTES * 2 + MENU_OPTION_BYTES + MENU_ACTION_BYTES + MENU_ADDR_BYTES * 2 + MENU_FONT_BYTES + MENU_LIST_INDEX_BYTES + MENU_KEY_BYTES * 4)

#define MENU_CHECKBOX_DATA (MENU_POSITION_BYTES * 2 + MENU_OPTION_BYTES + MENU_ACTION_BYTES + MENU_ADDR_BYTES * 2 + MENU_FONT_BYTES + MENU_CHECKBOX_INDEX_BYTES)

#define MENU_RADIOBUTTON_DATA (MENU_POSITION_BYTES * 2 + MENU_OPTION_BYTES + MENU_ACTION_BYTES + MENU_ADDR_BYTES * 2 + MENU_FONT_BYTES + MENU_RADIOBUTTON_INDEX_BYTES)

#define MENU_SUBWINDOW_DATA (MENU_POSITION_BYTES * 2 + MENU_KEY_BYTES * 3)

#define MENU_WINDOW_DATA (MENU_KEY_BYTES * 3)

#define MENU_SHORTCUT_DATA (MENU_KEY_BYTES + MENU_ACTION_BYTES + MENU_ADDR_BYTES)

void menu_redraw(void);
void menu_keypress(uint8_t key);

#ifdef MENU_MOUSE_SUPPORT
void menu_mouse(SCREENPOS x, SCREENPOS y, uint8_t key);
#endif

#ifdef MENU_USE_MULTILANGUAGE
void menu_language_set(uint8_t id);
#endif


#endif
