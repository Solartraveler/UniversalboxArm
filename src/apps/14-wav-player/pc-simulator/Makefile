##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.11.2] date: [Sun Dec 26 11:35:37 CET 2021]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = wavplayer-pcsim


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

COMMON=../../common
VERYCOMMON=../../../common
SIMCOMMON=$(COMMON)/pc-simulator

BOXLIB=$(COMMON)/boxlib/pc-simulator
LWIPLIB=$(VERYCOMMON)/lwip
HALLIB=$(SIMCOMMON)/HAL
FATFS=$(VERYCOMMON)/fatfs
ALGORITHM=$(VERYCOMMON)/algorithm
JSMN=$(VERYCOMMON)/jsmn
MENUINTERPRETER=$(VERYCOMMON)/menuInterpreter

######################################
# source
######################################
# C sources
C_SOURCES =  \
main.c \
$(BOXLIB)/keys.c \
$(BOXLIB)/leds.c \
$(BOXLIB)/rs232debug.c \
$(BOXLIB)/peripheral.c \
$(BOXLIB)/sequenceToPulseaudio.c \
$(BOXLIB)/flash.c \
$(BOXLIB)/lcd.c \
$(BOXLIB)/coproc.c \
$(BOXLIB)/mcu.c \
$(BOXLIB)/readLine.c \
$(HALLIB)/simulated.c \
$(FATFS)/ff.c \
$(FATFS)/ffunicode.c \
$(FATFS)/diskio.c \
$(ALGORITHM)/framebufferBwFast.c \
$(ALGORITHM)/utility.c \
$(ALGORITHM)/libcMinsize.c \
$(ALGORITHM)/femtoVsnprintf.c \
$(ALGORITHM)/json.c \
$(ALGORITHM)/filesystem.c \
$(MENUINTERPRETER)/menu-interpreter.c \
$(MENUINTERPRETER)/menu-text.c \
$(SIMCOMMON)/simhelper.c \
../wavplayer.c \
../gui.c \

# ASM sources
ASM_SOURCES =

#######################################
# binaries
#######################################
PREFIX =
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################
# cpu

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
-DPC_SIM \
-DAPPVERSION=\"0.0.0\"


# AS includes
AS_INCLUDES =

# C includes
C_INCLUDES =  \
-I$(BOXLIB) \
-I$(SIMCOMMON) \
-I$(COMMON) \
-I$(VERYCOMMON) \
-I$(LWIPLIB) \
-I$(HALLIB) \
-I$(FATFS) \
-I$(ALGORITHM) \
-I$(JSMN)\
-I$(MENUINTERPRETER)\
-I.. \
-I.


# compile gcc flags

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -Wextra -fdata-sections -ffunction-sections

CFLAGS += -fsanitize=address
LDFLAGS += -fsanitize=address

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

# default action: build all
all: $(BUILD_DIR)/$(TARGET)


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/$(TARGET): $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -lpthread -lglut -lGL -lm -lpulse-simple -o $@

$(BUILD_DIR):
	mkdir $@

testfiles:
#Thanks chatgpt:
	sox -n -r 8000 -b 8 "$(BUILD_DIR)/sine-1000Hz-8B-8k-1ch.wav" synth 2 sine 1000
	sox -n -r 44100 -b 16 "$(BUILD_DIR)/sine-1000Hz-16B-44100-1ch.wav" synth 2 sine 1000
	sox -n -r 16000 -b 16 -c 2 "$(BUILD_DIR)/sine-1000Hz-16B-16k-2ch.wav" synth 2 sine 1000
	sox -n -r 2000 -b 8 "$(BUILD_DIR)/sine-0750Hz-8B-2k-1ch.wav" synth 2 sine 750
	sox -n -r 8000 -b 8 "$(BUILD_DIR)/sine-0500Hz-8B-8k-1ch.wav" synth 2 sine 500
	sox -n -r 8000 -b 8 "$(BUILD_DIR)/sine-0250Hz-8B-8k-1ch.wav" synth 2 sine 250

FILELIST=\
 "$(BUILD_DIR)/sine-1000Hz-8B-8k-1ch.wav" "sine-1000Hz-8B-8k-1ch.wav"\
 "$(BUILD_DIR)/sine-1000Hz-16B-44100-1ch.wav" "sine-1000Hz-16B-44100-1ch.wav"\
 "$(BUILD_DIR)/sine-1000Hz-16B-16k-2ch.wav" "sine-1000Hz-16B-16k-2ch.wav"\
 "$(BUILD_DIR)/sine-0750Hz-8B-2k-1ch.wav" "sine-0750Hz-8B-2k-1ch.wav"\
 "$(BUILD_DIR)/sine-0500Hz-8B-8k-1ch.wav" "sine-0500Hz-8B-8k-1ch.wav"\
 "$(BUILD_DIR)/sine-0250Hz-8B-8k-1ch.wav" "sine-0250Hz-8B-8k-1ch.wav"\


test: $(BUILD_DIR)/$(TARGET) testfiles
	rm -f emulatedFlash.bin
	./$(BUILD_DIR)/$(TARGET) 128x128 $(FILELIST)

test2: $(BUILD_DIR)/$(TARGET) testfiles
	rm -f emulatedFlash.bin
	./$(BUILD_DIR)/$(TARGET) 160x128 $(FILELIST)

test3: $(BUILD_DIR)/$(TARGET) testfiles
	rm -f emulatedFlash.bin
	./$(BUILD_DIR)/$(TARGET) 320x240 $(FILELIST)


#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***