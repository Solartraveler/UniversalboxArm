##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.11.2] date: [Sun Dec 26 11:35:37 CET 2021]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################

#Name of this application
NAME     = Loader
#Version of this application, to be used in the metadata
VERSION  = 0.18.0
#Author of this application, to be used in the metadata
AUTHOR   = Malte Marwedel
#Use the spdx notation here, to be used in the metadata
LICENSE  = GPL-3.0-or-later
#The MCU, this binary is compiled for, to be used in the metadata (without the last two chars)
CHIP    ?= stm32l452xx
#The MCU variant (flash size and layout)
VARIANT ?= RETx
#Hardware, if there are platforms with the same chip, but different layout, some hardware variable might make the difference
BOARD   ?= PcbV1
#Watchdog in [ms]. 0 disables, maximum is 65535
WATCHDOG = 30000

#If the name is not readme.md, --transform needs to be used to adjust the name
TARREADME = readme.md
#Add a bitmap image to the tar file. Can be left empty.
TARIMAGE =

TARGET = $(NAME)-$(CHIP)
TARGETRAM = $(TARGET)-ram
TARGETFLASH = $(TARGET)-flash

#The final name needs to be application.bin
TARBINARY = --transform='flags=r;s|$(TARGETRAM)|application|' --directory=$(BUILD_DIR) $(TARGETRAM).bin
#The name should not be changed
TARMETA = metadata.json

#Date to be used in the metadata
DATE=`date +'%F'`
#Md5sum of the application
MD5SUM=`md5sum $(BUILD_DIR)/$(TARGETRAM).bin | cut -d ' ' -f 1`
#Start address where the program should be loaded to. Needs to be compatible with the used linking addresses.
STARTADDR=`grep "_Code_Start.=" $(LDSCRIPTRAM) | cut -d " " -f3 | sed 's/[;\r]//g'`

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Os

#All uppercase, but the x as placeholder should stay lower case
#Eg stm32l452xx -> STM32L452xx, stm32f411xe -> STM32F411xE
CHIPDEFINE := $(shell echo $(CHIP) | tr a-w A-W | tr y-z Y-Z)
#stm32l452xx -> stm32l452
CHIPSUBFAMILY := $(shell echo $(CHIP) | sed 's/..$$//')
#stm32l452xx -> stm32l4xx
CHIPFAMILY := $(shell echo $(CHIP) | sed 's/....$$/xx/')
#stm32l452xx -> STM32L452RETx
CHIPLINKER := $(shell echo $(CHIP) | sed 's/..$$//' | tr a-z A-Z)$(VARIANT)
#All uppercase
BOARDDEFINE := $(shell echo $(BOARD) | tr a-z A-Z)

#######################################
# paths
#######################################
# Build path
BUILD_ALL = build
BUILD_DIR = $(BUILD_ALL)/$(CHIP)-$(BOARD)

COMMON=../common
VERYCOMMON=../../common

STM_HAL=$(COMMON)/$(CHIPFAMILY)_HAL_Driver
SHARED_INIT=$(COMMON)/shared-init
CMSIS=$(COMMON)/CMSIS
BOXLIB=$(COMMON)/boxlib/$(CHIPSUBFAMILY)
BOXLIBCORE=$(COMMON)/boxlib/cortexm
DISPLAYLIB1=$(VERYCOMMON)/st7735
DISPLAYLIB2=$(VERYCOMMON)/ili9341
USBLIB=$(COMMON)/libusb_stm32
LWIPLIB=$(VERYCOMMON)/lwip
FATFS=$(VERYCOMMON)/fatfs
ALGORITHM=$(VERYCOMMON)/algorithm
JSMN=$(VERYCOMMON)/jsmn
MENUINTERPRETER=$(VERYCOMMON)/menuInterpreter

######################################
# source
######################################
# C sources
C_SOURCES =  \
Core/Src/main.c \
Core/Src/$(CHIPFAMILY)_hal_msp.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_rcc.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_rcc_ex.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_flash.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_flash_ex.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_flash_ramfunc.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_gpio.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_pwr.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_pwr_ex.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_cortex.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_exti.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_spi.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_tim.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_tim_ex.c \
$(STM_HAL)/Src/$(CHIPFAMILY)_hal_dma.c \
Core/Src/system_$(CHIPFAMILY).c \
$(BOXLIB)/keys.c \
$(BOXLIB)/leds.c \
$(BOXLIB)/rs232debug.c \
$(BOXLIB)/peripheral.c \
$(BOXLIB)/peripheralDma.c \
$(BOXLIB)/flash.c \
$(BOXLIB)/coproc.c \
$(BOXLIB)/simpleadc.c \
$(BOXLIB)/boxusb.c \
$(BOXLIBCORE)/mcu.c \
$(BOXLIBCORE)/exceptions.c \
$(BOXLIBCORE)/lcd.c \
$(BOXLIBCORE)/systickWithFreertos.c \
$(DISPLAYLIB1)/st7735.c \
$(DISPLAYLIB2)/ili9341.c \
$(USBLIB)/usbd_core.c \
$(USBLIB)/usbd_stm32l433_devfs.c \
$(LWIPLIB)/md5.c \
$(FATFS)/ff.c \
$(FATFS)/ffunicode.c \
$(FATFS)/diskio.c \
$(ALGORITHM)/tarextract.c \
$(ALGORITHM)/framebufferLowmem.c \
$(ALGORITHM)/utility.c \
$(ALGORITHM)/libcMinsize.c \
$(ALGORITHM)/femtoVsnprintf.c \
$(ALGORITHM)/json.c \
$(ALGORITHM)/filesystem.c \
$(MENUINTERPRETER)/menu-interpreter.c \
$(MENUINTERPRETER)/menu-text.c \
loader.c \
gui.c \


# ASM sources
ASM_SOURCES =  \
$(SHARED_INIT)/startup_$(CHIP).s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DAPPVERSION=\"$(VERSION)\" \
-D$(CHIPDEFINE) \
-DBOARD_$(BOARDDEFINE)


# AS includes
AS_INCLUDES =

# C includes
C_INCLUDES =  \
-ICore/Inc \
-I$(BOXLIB) \
-I$(STM_HAL)/Inc \
-I$(STM_HAL)/Inc/Legacy \
-I$(CMSIS)/Device/ST/$(CHIPFAMILY)/Include \
-I$(CMSIS)/Include \
-I$(COMMON) \
-I$(VERYCOMMON) \
-I$(USBLIB) \
-I$(LWIPLIB) \
-I$(FATFS) \
-I$(ALGORITHM) \
-I$(JSMN)\
-I$(MENUINTERPRETER)\
-I.


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
# This linker scripts are diffent from the ones of all other firmwares.
LDSCRIPTFLASH = $(CHIPLINKER)_FLASH.ld
LDSCRIPTRAM = $(CHIPLINKER)_RAM.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs $(LIBDIR) $(LIBS) -Wl,--gc-sections

LDFLAGSRAM =   $(LDFLAGS) -T$(LDSCRIPTRAM) -Wl,-Map=$(BUILD_DIR)/$(TARGETRAM).map,--cref
LDFLAGSFLASH = $(LDFLAGS) -T$(LDSCRIPTFLASH) -Wl,-Map=$(BUILD_DIR)/$(TARGETFLASH).map,--cref

# default action: build all
all: $(BUILD_DIR)/$(TARGETFLASH).elf $(BUILD_DIR)/$(TARGETFLASH).hex $(BUILD_DIR)/$(TARGETFLASH).bin $(BUILD_DIR)/$(TARGETRAM).tar

disassembly: $(BUILD_DIR)/$(TARGETFLASH).disass  $(BUILD_DIR)/$(TARGETRAM).disass



#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGETFLASH).elf: $(OBJECTS) Makefile | $(BUILD_DIR)
	$(CC) $(OBJECTS) $(LDFLAGSFLASH) -o $@
	$(SZ) $@

$(BUILD_DIR)/$(TARGETRAM).elf: $(OBJECTS) Makefile | $(BUILD_DIR)
	$(CC) $(OBJECTS) $(LDFLAGSRAM) -o $@

$(BUILD_DIR)/metadata.json: $(BUILD_DIR)/$(TARGETRAM).bin Makefile
	jq -n --arg date $(DATE) --arg checksum $(MD5SUM) --arg startaddr $(STARTADDR) '{"name":"$(NAME)", "compiled":$$date, "version": "$(VERSION)", "author": "$(AUTHOR)", "license": "$(LICENSE)", "mcu":"$(CHIPSUBFAMILY)", "md5sum":$$checksum, "watchdog":"$(WATCHDOG)", "appaddr":$$startaddr}' > $@

$(BUILD_DIR)/$(TARGETRAM).tar: $(BUILD_DIR)/$(TARGETRAM).bin $(BUILD_DIR)/metadata.json Makefile | $(BUILD_DIR)
	tar --create -f $@ --blocking-factor=1 --owner=0 --group=0 $(TARREADME) $(TARIMAGE) $(TARBINARY) $(TARMETA)

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@

$(BUILD_DIR)/%.disass: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	arm-none-eabi-objdump -d $< > $@

$(BUILD_DIR):
	mkdir -p $@

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_ALL)

#######################################
# uploading
#######################################
upload:
	../../utilities/dfu-upload.sh $(BUILD_DIR)/$(TARGET)

uploadExtflash:
	../../utilities/dfu-upload.sh --store $(BUILD_DIR)/$(TARGET)

uploadNostart:
	../../utilities/dfu-upload.sh --nostart $(BUILD_DIR)/$(TARGET)

uploadExtflashNostart:
	../../utilities/dfu-upload.sh --store --nostart $(BUILD_DIR)/$(TARGET)


#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
