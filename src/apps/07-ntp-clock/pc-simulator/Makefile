##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.11.2] date: [Sun Dec 26 11:35:37 CET 2021]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = ntp-clock


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

COMMON=../../common
VERYCOMMON=../../../common
SIMCOMMON=$(COMMON)/pc-simulator

BOXLIB=$(COMMON)/boxlib/pc-simulator
LWIPLIB=$(VERYCOMMON)/lwip
HALLIB=$(SIMCOMMON)/HAL
FATFS=$(VERYCOMMON)/fatfs
ALGORITHM=$(VERYCOMMON)/algorithm
JSMN=$(VERYCOMMON)/jsmn
MENUINTERPRETER=$(VERYCOMMON)/menuInterpreter
FREERTOS=$(SIMCOMMON)/FreeRTOS
UTILITIES=../../../utilities
DIGITS=$(UTILITIES)/digits

######################################
# source
######################################
# C sources
C_SOURCES =  \
main.c \
$(BOXLIB)/keys.c \
$(BOXLIB)/leds.c \
$(BOXLIB)/rs232debug.c \
$(BOXLIB)/peripheral.c \
$(BOXLIB)/flash.c \
$(BOXLIB)/lcd.c \
$(BOXLIB)/lcdBacklight.c \
$(BOXLIB)/coproc.c \
$(BOXLIB)/mcu.c \
$(BOXLIB)/esp.c \
$(BOXLIB)/clock.c \
$(BOXLIB)/readLine.c \
$(BOXLIB)/systickWithFreertos.c \
$(HALLIB)/simulated.c \
$(FATFS)/ff.c \
$(FATFS)/ffunicode.c \
$(FATFS)/diskio.c \
$(ALGORITHM)/framebufferColor.c \
$(ALGORITHM)/utility.c \
$(ALGORITHM)/libcMinsize.c \
$(ALGORITHM)/femtoVsnprintf.c \
$(ALGORITHM)/json.c \
$(ALGORITHM)/filesystem.c \
$(ALGORITHM)/filesystemMt.c \
$(ALGORITHM)/imageDrawer.c \
$(ALGORITHM)/imageDrawerLowres.c \
$(ALGORITHM)/dateTime.c \
$(ALGORITHM)/clockMt.c \
$(ALGORITHM)/peripheralMt.c \
$(ALGORITHM)/screenshot.c \
$(ALGORITHM)/imageTgaWrite.c \
$(MENUINTERPRETER)/menu-interpreter.c \
$(MENUINTERPRETER)/menu-text.c \
$(SIMCOMMON)/simhelper.c \
$(FREERTOS)/simulateFreertos.c \
../ntp-clock.c \
../gui.c \
../clockConfig.c \

PPM_SOURCES = \
$(DIGITS)/0.ppm \
$(DIGITS)/1.ppm \
$(DIGITS)/2.ppm \
$(DIGITS)/3.ppm \
$(DIGITS)/4.ppm \
$(DIGITS)/5.ppm \
$(DIGITS)/6.ppm \
$(DIGITS)/7.ppm \
$(DIGITS)/8.ppm \
$(DIGITS)/9.ppm \
$(DIGITS)/colon.ppm \
$(DIGITS)/0Xxl.ppm \
$(DIGITS)/1Xxl.ppm \
$(DIGITS)/2Xxl.ppm \
$(DIGITS)/3Xxl.ppm \
$(DIGITS)/4Xxl.ppm \
$(DIGITS)/5Xxl.ppm \
$(DIGITS)/6Xxl.ppm \
$(DIGITS)/7Xxl.ppm \
$(DIGITS)/8Xxl.ppm \
$(DIGITS)/9Xxl.ppm \
$(DIGITS)/colonXxl.ppm \


#######################################
# binaries
#######################################
PREFIX =
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

PPM2BIN = $(UTILITIES)/ppm2menuimage/build/ppm2menuimage

#######################################
# CFLAGS
#######################################
# cpu

# macros for gcc
# AS defines
AS_DEFS =

# C defines
C_DEFS =  \
-DPC_SIM \
-DAPPVERSION=\"0.0.0\"


# AS includes
AS_INCLUDES =

# C includes
C_INCLUDES =  \
-I$(BOXLIB) \
-I$(SIMCOMMON) \
-I$(COMMON) \
-I$(VERYCOMMON) \
-I$(LWIPLIB) \
-I$(HALLIB) \
-I$(FATFS) \
-I$(ALGORITHM) \
-I$(JSMN)\
-I$(MENUINTERPRETER)\
-I$(FREERTOS) \
-I.. \
-I. \
-I$(BUILD_DIR)\

# compile gcc flags

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -Wextra -fdata-sections -ffunction-sections

CFLAGS += -fsanitize=address
LDFLAGS += -fsanitize=address

CFLAGS += -g -gdwarf-2


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

# default action: build all
all: $(BUILD_DIR)/$(TARGET)


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of binary program objects
GENIMAGE = $(addprefix $(BUILD_DIR)/,$(notdir $(PPM_SOURCES:.ppm=.8bit)))
GENHEADERS = $(addprefix $(BUILD_DIR)/,$(notdir $(PPM_SOURCES:.ppm=.h)))
vpath %.ppm $(sort $(dir $(PPM_SOURCES)))

.PRECIOUS: $(GENHEADERS)
.PRECIOUS: $(GENIMAGE)

$(BUILD_DIR)/%.8bit: %.ppm Makefile | $(BUILD_DIR)
	$(PPM2BIN) --compress --red 3 --green 3 --blue 2 --input $< --output $@

$(BUILD_DIR)/%.h: $(BUILD_DIR)/%.8bit Makefile | $(BUILD_DIR)
	xxd -i $< | sed 's/unsigned/const unsigned/g' > $@

$(BUILD_DIR)/%.o: %.c Makefile $(GENHEADERS) | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/$(TARGET): $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -lpthread -lglut -lGL -lm  -o $@

$(BUILD_DIR):
	mkdir $@

test: $(BUILD_DIR)/$(TARGET)
	rm -f emulatedFlash.bin
	./$(BUILD_DIR)/$(TARGET) 128x128

test2: $(BUILD_DIR)/$(TARGET)
	rm -f emulatedFlash.bin
	./$(BUILD_DIR)/$(TARGET) 160x128

test3: $(BUILD_DIR)/$(TARGET)
	rm -f emulatedFlash.bin
	./$(BUILD_DIR)/$(TARGET) 320x240

test4: $(BUILD_DIR)/$(TARGET)
	./$(BUILD_DIR)/$(TARGET)

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***